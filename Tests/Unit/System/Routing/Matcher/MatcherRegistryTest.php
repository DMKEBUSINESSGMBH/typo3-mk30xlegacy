<?php

declare(strict_types=1);

/*
 * Copyright notice
 *
 * (c) DMK E-BUSINESS GmbH <dev@dmk-ebusiness.de>
 * All rights reserved
 *
 * This file is part of the "mk30xlegacy" Extension for TYPO3 CMS.
 *
 * This script is part of the TYPO3 project. The TYPO3 project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GNU Lesser General Public License can be found at
 * www.gnu.org/licenses/lgpl.html
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 */

namespace DMK\Mk30xLegacy\Tests\System\Routing\Matcher;

use DMK\Mk30xLegacy\System\Routing\Matcher\MatcherInterface;
use DMK\Mk30xLegacy\System\Routing\Matcher\MatcherRegistry;
use DMK\Mk30xLegacy\System\Routing\UriResult;
use DMK\Mk30xLegacy\Tests\BaseUnitTestCase;
use Prophecy\Prophecy\ObjectProphecy;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

/**
 * MatcherRegistry test.
 *
 * @author Michael Wagner
 */
class MatcherRegistryTest extends BaseUnitTestCase
{
    private ?MatcherRegistry $registry = null;
    /**
     * @var ServerRequestInterface|ObjectProphecy|null
     */
    private ?ObjectProphecy $request = null;
    /**
     * @var ResponseInterface|ObjectProphecy|null
     */
    private ?ObjectProphecy $response = null;
    /**
     * @var MatcherInterface|ObjectProphecy|null
     */
    private ?ObjectProphecy $matherP100 = null;
    /**
     * @var MatcherInterface|ObjectProphecy|null
     */
    private ?ObjectProphecy $matherP200 = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->request = $this->prophesize(ServerRequestInterface::class);
        $this->response = $this->prophesize(ResponseInterface::class);

        $this->registry = new MatcherRegistry();
        $this->matherP200 = $this->prophesize(MatcherInterface::class);
        $this->registry->addMatcher($this->matherP200->reveal(), 200);
        $this->matherP100 = $this->prophesize(MatcherInterface::class);
        $this->registry->addMatcher($this->matherP100->reveal(), 100);
    }

    /**
     * @test
     */
    public function isMatchableResponseReturnsFalse()
    {
        $this->matherP100->isMatchableResponse($this->response->reveal())->willReturn(false)->shouldBeCalledOnce();
        $this->matherP200->isMatchableResponse($this->response->reveal())->willReturn(false)->shouldBeCalledOnce();
        $this->assertFalse($this->registry->isMatchableResponse($this->response->reveal()));
    }

    /**
     * @test
     */
    public function isMatchableResponseReturnsTrueForFirstMatcher()
    {
        $this->matherP100->isMatchableResponse($this->response->reveal())->willReturn(true)->shouldBeCalledOnce();
        $this->matherP200->isMatchableResponse($this->response->reveal())->shouldNotBeCalled();
        $this->assertTrue($this->registry->isMatchableResponse($this->response->reveal()));
    }

    /**
     * @test
     */
    public function isMatchableResponseReturnsTrueForLastMatcher()
    {
        $this->matherP100->isMatchableResponse($this->response->reveal())->willReturn(false)->shouldBeCalledOnce();
        $this->matherP200->isMatchableResponse($this->response->reveal())->willReturn(true)->shouldBeCalledOnce();
        $this->assertTrue($this->registry->isMatchableResponse($this->response->reveal()));
    }

    /**
     * @test
     */
    public function matchRequestReturnsEmptyResult()
    {
        $request = $this->prophesize(ServerRequestInterface::class);
        $this->matherP100->isMatchableResponse($this->response->reveal())->willReturn(false)->shouldBeCalledOnce();
        $this->matherP200->isMatchableResponse($this->response->reveal())->willReturn(true)->shouldBeCalledOnce();
        $this->matherP200
            ->matchRequest($request->reveal(), $this->response->reveal())
            ->willReturn(new UriResult())
            ->shouldBeCalledOnce();
        $this->assertFalse(
            $this->registry->matchRequest($request->reveal(), $this->response->reveal())->hasAvailability()
        );
    }

    /**
     * @test
     */
    public function matchRequestReturnsResultFromFirstMatcher()
    {
        $request = $this->prophesize(ServerRequestInterface::class);

        $resultP100 = $this->prophesize(UriResult::class);
        $this->matherP100->isMatchableResponse($this->response->reveal())->willReturn(true)->shouldBeCalledOnce();
        $resultP100->isAvailable()->willReturn(true)->shouldBeCalledOnce();
        $this->matherP100
            ->matchRequest($request->reveal(), $this->response->reveal())
            ->willReturn($resultP100->reveal())
            ->shouldBeCalledOnce();

        $this->matherP200->isMatchableResponse()->shouldNotBeCalled();
        $this->matherP200->matchRequest()->shouldNotBeCalled();

        $this->assertSame(
            $resultP100->reveal(),
            $this->registry->matchRequest($request->reveal(), $this->response->reveal())
        );
    }

    /**
     * @test
     */
    public function matchRequestReturnsResultFromLastMatcher()
    {
        $request = $this->prophesize(ServerRequestInterface::class);

        $this->matherP100->isMatchableResponse($this->response->reveal())->willReturn(false)->shouldBeCalledOnce();
        $this->matherP100->matchRequest()->shouldNotBeCalled();

        $resultP200 = $this->prophesize(UriResult::class);
        $resultP200->isAvailable()->willReturn(true)->shouldBeCalledOnce();
        $this->matherP200->isMatchableResponse($this->response->reveal())->willReturn(true)->shouldBeCalledOnce();
        $this->matherP200
            ->matchRequest($request->reveal(), $this->response->reveal())
            ->willReturn($resultP200->reveal())
            ->shouldBeCalledOnce();

        $this->assertSame(
            $resultP200->reveal(),
            $this->registry->matchRequest($request->reveal(), $this->response->reveal())
        );
    }
}
