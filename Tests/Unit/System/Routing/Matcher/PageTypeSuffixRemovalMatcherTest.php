<?php

declare(strict_types=1);

/*
 * Copyright notice
 *
 * (c) DMK E-BUSINESS GmbH <dev@dmk-ebusiness.de>
 * All rights reserved
 *
 * This file is part of the "mk30xlegacy" Extension for TYPO3 CMS.
 *
 * This script is part of the TYPO3 project. The TYPO3 project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GNU Lesser General Public License can be found at
 * www.gnu.org/licenses/lgpl.html
 *
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * This copyright notice MUST APPEAR in all copies of the script!
 */

namespace DMK\Mk30xLegacy\Tests\System\Routing\Matcher;

use DMK\Mk30xLegacy\Domain\Manager\ConfigurationManager;
use DMK\Mk30xLegacy\System\Event\UriMatchPreAvailabilityCheckEvent;
use DMK\Mk30xLegacy\System\Http\RequestFactory;
use DMK\Mk30xLegacy\System\Routing\Matcher\PageTypeSuffixRemovalMatcher;
use DMK\Mk30xLegacy\System\Routing\UriResult;
use DMK\Mk30xLegacy\Tests\BaseUnitTestCase;
use Prophecy\Argument;
use Prophecy\Prophecy\ObjectProphecy;
use Psr\EventDispatcher\EventDispatcherInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use TYPO3\CMS\Core\Http\Uri;
use TYPO3\CMS\Core\Routing\PageArguments;
use TYPO3\CMS\Core\Routing\RouteResultInterface;
use TYPO3\CMS\Core\Routing\RouterInterface;
use TYPO3\CMS\Core\Routing\SiteMatcher;
use TYPO3\CMS\Core\Routing\SiteRouteResult;
use TYPO3\CMS\Core\Site\Entity\Site;
use TYPO3\CMS\Core\Site\Entity\SiteInterface;

/**
 * PageTypeSuffixRemovalMatcher test.
 *
 * @author Michael Wagner
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class PageTypeSuffixRemovalMatcherTest extends BaseUnitTestCase
{
    private ?PageTypeSuffixRemovalMatcher $matcher = null;
    /**
     * @var ConfigurationManager|ObjectProphecy|null
     */
    private ?ObjectProphecy $configuration = null;
    /**
     * @var ObjectProphecy|RequestFactory|null
     */
    private ?ObjectProphecy $requestFactory = null;
    /**
     * @var ObjectProphecy|EventDispatcherInterface|null
     */
    private ?ObjectProphecy $eventDispatcher = null;
    /**
     * @var ObjectProphecy|SiteMatcher|null
     */
    private ?ObjectProphecy $siteMatcher = null;
    /**
     * @var ObjectProphecy|ServerRequestInterface|null
     */
    private ?ObjectProphecy $request = null;
    /**
     * @var ObjectProphecy|ResponseInterface|null
     */
    private ?ObjectProphecy $response = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->configuration = $this->prophesize(ConfigurationManager::class);
        $this->requestFactory = $this->prophesize(RequestFactory::class);
        $this->eventDispatcher = $this->prophesize(EventDispatcherInterface::class);
        $this->matcher = new PageTypeSuffixRemovalMatcher(
            $this->configuration->reveal(),
            $this->requestFactory->reveal(),
            $this->eventDispatcher->reveal()
        );

        $this->siteMatcher = $this->prophesize(SiteMatcher::class);
        $this->inject($this->matcher, 'siteMatcher', $this->siteMatcher->reveal());

        $this->request = $this->prophesize(ServerRequestInterface::class);
        $this->request->getUri()->willReturn(new Uri('https://relaunch.dev/foo.html?bar=baz'));
        $this->response = $this->prophesize(ResponseInterface::class);
        $this->eventDispatcher->dispatch(Argument::type(UriMatchPreAvailabilityCheckEvent::class))->willReturnArgument();
    }

    /**
     * @test
     */
    public function isMatchableResponseForMissingSuffixConfig()
    {
        $this->configuration->getSuffixRemovalSuffixes()->willReturn('')->shouldBeCalledOnce();
        $this->configuration->getResponseMatchPattern()->shouldNotBeCalled();
        $this->assertFalse(
            $this->matcher->isMatchableResponse($this->response->reveal(), $this->request->reveal())
        );
    }

    /**
     * @test
     */
    public function isMatchableResponseForUnknownSuffix()
    {
        $this->configuration->getSuffixRemovalSuffixes()->willReturn('xml')->shouldBeCalledOnce();
        $this->configuration->getResponseMatchPattern()->shouldNotBeCalled();
        $this->assertFalse(
            $this->matcher->isMatchableResponse($this->response->reveal(), $this->request->reveal())
        );
    }

    /**
     * @test
     */
    public function isMatchableResponseForMatchingSuffix()
    {
        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();
        $this->configuration->getResponseMatchPattern()->willReturn('404')->shouldBeCalledOnce();
        $this->response->getStatusCode()->willReturn('404')->shouldBeCalled();
        $this->assertTrue(
            $this->matcher->isMatchableResponse($this->response->reveal(), $this->request->reveal())
        );
    }

    /**
     * @test
     */
    public function createResultForRequestForMissingSiteRouteResult()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $routeResult = $this->prophesize(RouteResultInterface::class);

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertFalse($result->hasAvailability());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }

    /**
     * @test
     */
    public function createResultForRequestForNoSite()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $routeResult = $this->prophesize(SiteRouteResult::class);
        $routeResult
            ->getSite()
            ->willReturn($this->prophesize(SiteInterface::class)->reveal())
            ->shouldBeCalledOnce();

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest->withAttribute()->shouldNotBeCalled();

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertFalse($result->hasAvailability());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }

    /**
     * @test
     */
    public function createResultForRequestForNoPage()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $site = $this->prophesize(Site::class);

        $siteRouter = $this->prophesize(RouterInterface::class);
        $site->getRouter()->willReturn($siteRouter->reveal())->shouldBeCalledOnce();

        $routeResult = $this->prophesize(SiteRouteResult::class);
        $routeResult->getLanguage()->willReturn(null)->shouldBeCalledOnce();
        $routeResult
            ->getSite()
            ->willReturn($site->reveal())
            ->shouldBeCalledOnce();

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('site', $site)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();
        $checkerRequest
            ->withAttribute('language', null)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('routing', $routeResult)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $siteRouter->matchRequest(
            $checkerRequest->reveal(),
            $routeResult->reveal()
        )->willThrow('Exception');

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertFalse($result->hasAvailability());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }

    /**
     * @test
     */
    public function createResultForRequestForNoPageArguments()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $site = $this->prophesize(Site::class);

        $siteRouter = $this->prophesize(RouterInterface::class);
        $site->getRouter()->willReturn($siteRouter->reveal())->shouldBeCalledOnce();

        $routeResult = $this->prophesize(SiteRouteResult::class);
        $routeResult->getLanguage()->willReturn(null)->shouldBeCalledOnce();
        $routeResult
            ->getSite()
            ->willReturn($site->reveal())
            ->shouldBeCalledOnce();

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('site', $site)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();
        $checkerRequest
            ->withAttribute('language', null)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('routing', $routeResult)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $siteRouter->matchRequest(
            $checkerRequest->reveal(),
            $routeResult->reveal()
        )->willReturn($this->prophesize(RouteResultInterface::class)->reveal());

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertFalse($result->hasAvailability());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }

    /**
     * @test
     */
    public function createResultForRequestForNoPageId()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $site = $this->prophesize(Site::class);

        $siteRouter = $this->prophesize(RouterInterface::class);
        $site->getRouter()->willReturn($siteRouter->reveal())->shouldBeCalledOnce();

        $routeResult = $this->prophesize(SiteRouteResult::class);
        $routeResult->getLanguage()->willReturn(null)->shouldBeCalledOnce();
        $routeResult
            ->getSite()
            ->willReturn($site->reveal())
            ->shouldBeCalledOnce();

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('site', $site)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();
        $checkerRequest
            ->withAttribute('language', null)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('routing', $routeResult)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $pageArguments = $this->prophesize(PageArguments::class);
        $pageArguments->getPageId()->willReturn(0);

        $siteRouter->matchRequest(
            $checkerRequest->reveal(),
            $routeResult->reveal()
        )->willReturn($pageArguments->reveal());

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertFalse($result->hasAvailability());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }

    /**
     * @test
     */
    public function createResultForRequestForNoDirtyPageArguments()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $site = $this->prophesize(Site::class);

        $siteRouter = $this->prophesize(RouterInterface::class);
        $site->getRouter()->willReturn($siteRouter->reveal())->shouldBeCalledOnce();

        $routeResult = $this->prophesize(SiteRouteResult::class);
        $routeResult->getLanguage()->willReturn(null)->shouldBeCalledOnce();
        $routeResult
            ->getSite()
            ->willReturn($site->reveal())
            ->shouldBeCalledOnce();

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('site', $site)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();
        $checkerRequest
            ->withAttribute('language', null)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('routing', $routeResult)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $pageArguments = $this->prophesize(PageArguments::class);
        $pageArguments->getPageId()->willReturn(4);
        $pageArguments->areDirty()->willReturn(true);

        $siteRouter->matchRequest(
            $checkerRequest->reveal(),
            $routeResult->reveal()
        )->willReturn($pageArguments->reveal());

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertFalse($result->hasAvailability());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }

    /**
     * @test
     */
    public function createResultForRequest()
    {
        $checkerRequest = $this->prophesize(ServerRequestInterface::class);

        $this->configuration->getSuffixRemovalSuffixes()->willReturn('html')->shouldBeCalledOnce();

        $this->request->withUri(Argument::type(Uri::class))->willReturn($checkerRequest->reveal())->shouldBeCalled();

        $site = $this->prophesize(Site::class);

        $siteRouter = $this->prophesize(RouterInterface::class);
        $site->getRouter()->willReturn($siteRouter->reveal())->shouldBeCalledOnce();

        $routeResult = $this->prophesize(SiteRouteResult::class);
        $routeResult->getLanguage()->willReturn(null)->shouldBeCalledOnce();
        $routeResult
            ->getSite()
            ->willReturn($site->reveal())
            ->shouldBeCalledOnce();

        $this->siteMatcher
            ->matchRequest($checkerRequest->reveal())
            ->willReturn($routeResult->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('site', $site)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();
        $checkerRequest
            ->withAttribute('language', null)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $checkerRequest
            ->withAttribute('routing', $routeResult)
            ->willReturn($checkerRequest->reveal())
            ->shouldBeCalledOnce();

        $pageArguments = $this->prophesize(PageArguments::class);
        $pageArguments->getPageId()->willReturn(4);
        $pageArguments->areDirty()->willReturn(false);

        $siteRouter->matchRequest(
            $checkerRequest->reveal(),
            $routeResult->reveal()
        )->willReturn($pageArguments->reveal());

        /* @var $result UriResult */
        $result = $this->callInaccessibleMethod(
            $this->matcher,
            'createResultForRequest',
            $this->request->reveal(),
            $this->response->reveal()
        );

        $this->assertTrue($result->hasAvailability());
        $this->assertTrue($result->isAvailable());
        $this->assertSame('/foo', $result->getUri()->getPath());
    }
}
